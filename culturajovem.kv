#:import cos math.cos
#:import sin math.sin
#:import pi math.pi
#:import radians math.radians
#:import chain itertools.chain
#:import glob glob.glob

<TelaManager>:
	Menu:
		name: 'menu'
		id: menu


<Menu>:
	BoxLayout:
		id: boxMenu
		orientation: 'vertical'
		canvas:
			Color:
				rgba: (0.9, 0.9, 0.9, 1)
			Rectangle:
				size: self.size
				pos: self.pos

		BoxLayout:
			padding: '5sp'
			size_hint_y: 0.09
			canvas:
				Color:
					rgba: (1, 1, 1, 1)
				Rectangle:
					size: self.size
					pos: self.pos
			BoxLayout:
				size_hint_x: None
				width: 0
			buttonTopConfig:
				source: 'img/menu.png'
			Carousel:
				id: carouselIgreja
				Label:
					color: (0,0.6,0.6,1)
					text: 'CULTURA JOVEM'
					bold: True
				Label:
					color: (0,0.6,0.6,1)
					text: 'IB GUABIROTUBA'
					bold: True
			buttonTopConfig:
				source: 'img/definicoes.png'

		Carousel:
			id: carousel
			orientation: 'horizontal'
			index: 1
			ScrollView:
				orientation: 'vertical'
				BoxLayout:
					id: calendario_Scroll
					orientation: 'vertical'
					size_hint_y: None
					height: self.minimum_height
					
			ScrollView:
				orientation: 'vertical'
				BoxLayout:
					id: principal_Scroll
					orientation: 'vertical'
					size_hint_y: None
					height: self.minimum_height
					Label:
						text: 'blabla'
						color: (0, 0, 0, 1)
						size_hint_y: None
						height: 500
						AsyncImage:
							source: 'http://assets.pokemon.com/assets/cms2/img/pokedex/full/001.png'


			BoxLayout: 
				id: projetosScroll
				orientation: 'vertical'
				FloatLayout:
					id: loading
					size_hint_x: None
					size_hint_y: None
					width: 50
					height: 50
					pos: root.center_x, root.center_y
					canvas.before:
						Color:
							rgba: (1, 1, 1, 1)
						Ellipse:
							size: self.size
							pos: root.center_x - self.width/2, root.center_y - self.height/2
					SurroundingSlider:
						pos: self.pos
			            radius: 0.4 * self.width / 2

		BoxLayout:
			orientation: 'horizontal'
			size_hint_y: 0.09
			canvas.before:
				Color: 
					rgba: (1, 1, 1, 1)
				Rectangle:
					pos: self.pos
					size: self.size
			BoxLayout:
				size_hint_x: None
				width: 0

			buttonBottomMenu:
				on_release: root.ids.carousel.index = 0
				on_press: root.addDinamicContentCalendar()
				BoxLayout:
					padding: '0sp', '0sp', '0sp', '3sp'
					Image:
						color: [(0,0,0,0.25) , (1,1,1,1)][root.ids.carousel.index == 0]
						source: './img/calendario1.png'
				BoxLayout:
					size_hint_y: 0.3
					Label:
						text: 'Calendario'
						bold: True
						font_size: '10sp'
						color: [(0.7,0.7,0.7,1) , (0,0.6,0.6,1)][root.ids.carousel.index == 0]

			buttonBottomMenu:
				on_release: root.ids.carousel.index = 1
				BoxLayout:
					padding: '0sp', '0sp', '0sp', '3sp'
					Image:
						color: [(0,0,0,0.25) , (1,1,1,1)][root.ids.carousel.index == 1]
						source: './img/igreja (1).png'
				BoxLayout:
					size_hint_y: 0.3
					Label:
						text: 'Cutura Jovem'
						bold: True
						font_size: '10sp'
						color: [(0.7,0.7,0.7,1) , (0,0.6,0.6,1)][root.ids.carousel.index == 1]
				

			buttonBottomMenu:
				on_release: root.ids.carousel.index = 2
				BoxLayout:
					padding: '0sp', '0sp', '0sp', '3sp' 
					Image:
						color: [(0,0,0,0.25) , (1,1,1,1)][root.ids.carousel.index == 2]
						source: './img/foguete.png'
				BoxLayout:
					size_hint_y: 0.3
					Label:
						text: 'Projetos'
						bold: True
						font_size: '10sp'
						color: [(0.7,0.7,0.7,1) , (0,0.6,0.9,1)][root.ids.carousel.index == 2]

<SurroundingSlider>:
    a: self.angle_stop - self.angle_start
    angle: radians(self.a * (self.value - self.min) / (self.max - self.min))
    _half_cap_angle: 1 / 100
    canvas:
        Color:
            rgba: 0, 1, 1, 0.5
        Mesh:
            mode: 'triangle_strip'
            vertices:
                ((
                self.center_x + cos(radians(self.angle_start) - pi / 2 + self._half_cap_angle) * self.radius,
                self.center_y + sin(radians(self.angle_start) - pi / 2 + self._half_cap_angle) * self.radius,
                0, 1,
                self.center_x + cos(radians(self.angle_start) - pi / 2 + self._half_cap_angle) * (self.radius + self.bar_width),
                self.center_y + sin(radians(self.angle_start) - pi / 2 + self._half_cap_angle) * (self.radius + self.bar_width),
                0, 0,
                ) + tuple(chain(*[(
                self.center_x + cos(radians(self.angle_start + a * self.a) - pi / 2) * self.radius,
                self.center_y + sin(radians(self.angle_start + a * self.a) - pi / 2) * self.radius,
                .5, 1,
                self.center_x + cos(radians(self.angle_start + a * self.a) - pi / 2) * (self.radius + self.bar_width),
                self.center_y + sin(radians(self.angle_start + a * self.a) - pi / 2) * (self.radius + self.bar_width),
                .5, 0
                ) for a in (x / float(self.segments) for x in range(self.segments + 1))])) + (
                self.center_x + cos(radians(self.angle_stop) - pi / 2 - self._half_cap_angle) * self.radius,
                self.center_y + sin(radians(self.angle_stop) - pi / 2 - self._half_cap_angle) * self.radius,
                1, 1,
                self.center_x + cos(radians(self.angle_stop) - pi / 2 - self._half_cap_angle) * (self.radius + self.bar_width),
                self.center_y + sin(radians(self.angle_stop) - pi / 2 - self._half_cap_angle) * (self.radius + self.bar_width),
                1, 0,
                )) if self.angle_start and self.angle_stop and self.a and self.bar_width and self.radius else []
            indices: range(2 * self.segments + 6)
        Color:
        	rgba: (0, 0.5, 1, 1)
        Mesh:
            mode: 'triangle_strip'
            vertices:
                ((
                self.center_x + cos(radians(self.angle_start) - pi / 2 + self._half_cap_angle) * self.radius,
                self.center_y + sin(radians(self.angle_start) - pi / 2 + self._half_cap_angle) * self.radius,
                0, 1,
                self.center_x + cos(radians(self.angle_start) - pi / 2 + self._half_cap_angle) * (self.radius + self.bar_width),
                self.center_y + sin(radians(self.angle_start) - pi / 2 + self._half_cap_angle) * (self.radius + self.bar_width),
                0, 0,
                ) + tuple(chain(*[(
                self.center_x + (cos(radians(self.angle_start) + a * self.angle - pi / 2)) * self.radius,
                self.center_y + (sin(radians(self.angle_start) + a * self.angle - pi / 2)) * self.radius,
                .5, 1,
                self.center_x + (cos(radians(self.angle_start) + a * self.angle - pi / 2)) * (self.radius + self.bar_width),
                self.center_y + (sin(radians(self.angle_start) + a * self.angle - pi / 2)) * (self.radius + self.bar_width),
                .5, 0
                ) for a in (x / float(self.segments) for x in range(self.segments + 1))])) + (
                self.center_x + cos(radians(self.angle_start) + self.angle - pi / 2 - self._half_cap_angle) * self.radius,
                self.center_y + sin(radians(self.angle_start) + self.angle - pi / 2 - self._half_cap_angle) * self.radius,
                1, 1,
                self.center_x + cos(radians(self.angle_start) + self.angle - pi / 2 - self._half_cap_angle) * (self.radius + self.bar_width),
                self.center_y + sin(radians(self.angle_start) + self.angle - pi / 2 - self._half_cap_angle) * (self.radius + self.bar_width),
                1, 0
                )) if self.angle_start and self.angle_stop and self.a and self.bar_width and self.radius else []
            indices: range(2 * self.segments + 6)

<boxTitleCalendar>
	cols: 1
	rows: 2
	size_hint_y: None
	height: 70
	canvas.before:
		Color:
			rgba: (0, 0.5, 0.9, 1)
		RoundedRectangle:
			size: self.size
			pos: self.pos
			radius: [(10.0, 10.0), (10.0, 10.0), (10.0, 10.0), (10.0, 10.0)]

<labelHourBox>
	font_size: '10sp'
	color: (0, 0, 0, 0.5)
	size_hint_x: 0.2

<boxCalendarContanier>
	size_hint_y: None
	height: self.minimum_height
	padding: '5sp'

<labelDecoration>
	size_hint_x: 0.05
	canvas:
	    Color
	    	rgba:  (0.65, 0.65, 0.65, 1)
		Rectangle:
			pos:  self.x+(self.width*1.5)/2, self.y 
			size: self.width/10, self.height

<labelContentCalendar>
	size_hint_y: None
	size: self.texture_size
	padding_x: '10dp'
	padding_y: '15dp'
	halign: 'center'
	valign: 'center'
	text_size: self.width, None

<buttonBottomMenu@ButtonBehavior+BoxLayout>
	orientation: 'vertical'
	padding: 5

<buttonTopConfig@ButtonBehavior+Image>
	size_hint_x: 0.2
	color: (1, 1, 1, 0.4)

<SLabel@Label>:
    size_hint_x: None
    width: self.texture_size[0]